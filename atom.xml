<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://wang-kc.com/atom.xml" rel="self"/>
  
  <link href="http://wang-kc.com/"/>
  <updated>2022-12-15T07:09:46.018Z</updated>
  <id>http://wang-kc.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决&#39;mongorestore&#39;不是内部或外部命令，也不是可运行的程序问题</title>
    <link href="http://wang-kc.com/2022/12/15/%E8%A7%A3%E5%86%B3-mongorestore-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98/"/>
    <id>http://wang-kc.com/2022/12/15/%E8%A7%A3%E5%86%B3-mongorestore-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-15T06:24:35.000Z</published>
    <updated>2022-12-15T07:09:46.018Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.前言</strong></p><p>​       最近在Github上拉取了一个项目并尝试跑在本地。该  项目数据存储采用了mysql和mongodb，其中基础管理配置功能数据使用mysql，业务数据使用mongodb存储。</p><p>​        mysql只需要创建好数据库后，启动API服务，便会自动初始化数据，无需我们开发人员手动去手动初始化数据。而mongodb的数据需要我们使用mongorestore命令去导入mongodb数据。</p><p>这里介绍几个mongodb导入导出数据常用的命令：</p><h3 id="mongodb数据备份与恢复"><a href="#mongodb数据备份与恢复" class="headerlink" title="mongodb数据备份与恢复"></a>mongodb<a href="https://cloud.tencent.com/solution/backup?from=10680">数据备份</a>与恢复</h3><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h &lt;dbhost&gt; -d &lt;dbname&gt; -o &lt;dbdirectory&gt;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">mongodump -h localhost -d test -o /home/data</span><br></pre></td></tr></table></figure><ul><li>-h <a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>地址 如: 127.0.0.1 也可以指定端口号: 127.0.0.1:27017</li><li>-d 需要备份的<a href="https://cloud.tencent.com/solution/database?from=10680">数据库</a>名 如: test</li><li>-o 存放的目录 如: &#x2F;home&#x2F;data mongodb会自动在&#x2F;home&#x2F;data下创建一个test目录，里面存放备份数据</li></ul><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h &lt;dbhost&gt; -d &lt;dbname&gt; &lt;path&gt;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">mongorestore -h localhost -d test /home/data/user.<span class="property">json</span></span><br></pre></td></tr></table></figure><ul><li>-h 服务器地址 如: 127.0.0.1 也可以指定端口号: 127.0.0.1:27017</li><li>-d 需要恢复的数据库名 如: test</li><li>&lt; path &gt; 指定恢复数据的数据源目录位置 如: &#x2F;home&#x2F;data&#x2F;test</li></ul><h4 id="导出单张数据表"><a href="#导出单张数据表" class="headerlink" title="导出单张数据表"></a>导出单张数据表</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongoexport -h &lt;dbhost&gt; -d &lt;dbname&gt; -c &lt;collectionname&gt; -o &lt;file&gt; -f &lt;field&gt;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">mongoexport -h localhost -d test -c user -o /home/data/user.<span class="property">json</span></span><br></pre></td></tr></table></figure><ul><li>-h 服务器地址 如: 127.0.0.1 也可以指定端口号: 127.0.0.1:27017</li><li>-d 需要导出的数据库名 如: test</li><li>-c 需要导出的数据表名 如: user</li><li>-o 导出的数据文件名 如: &#x2F;home&#x2F;data&#x2F;user.json(文件支持多种格式，如txt,wps,xls等)</li><li>-f 导出数据输出的字段 如: “_id, username, password”</li></ul><h4 id="导入单张数据表"><a href="#导入单张数据表" class="headerlink" title="导入单张数据表"></a>导入单张数据表</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -h &lt;dbhost&gt; -d &lt;dbname&gt; -c &lt;collectionname&gt; &lt;file&gt;</span><br><span class="line"><span class="comment">// 示例</span></span><br><span class="line">mongoimport -h localhost -d test -c user /home/data/user.<span class="property">json</span></span><br></pre></td></tr></table></figure><ul><li><p>-h 服务器地址 如: 127.0.0.1 也可以指定端口号: 127.0.0.1:27017</p></li><li><p>-d 需要导入的数据库名 如: test</p></li><li><p>-c 需要导入的数据表名 如: user</p></li><li><p>&lt; file &gt; 需要导入的数据文件地址</p><p>使用该命令（<strong>mongorestore.exe -d flash-waimai d:\elm</strong>）导入数据时。报错<strong>‘mongorestore’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</strong></p><p><img src="/2022/12/15/%E8%A7%A3%E5%86%B3-mongorestore-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98/1.png"></p></li></ul><p><strong>2.解决</strong></p><p>网上的说法也是众说纷纭，大部分是告诉我环境变量没配好。其实不然，在仔细检查了环境变量配置和安装目录下的bin目录，发现bin目录中并没有对应的mongodump和mongorestore。又通过百度得知4.4.8d版本中mongodb进行了功能拆分（默认时没有mogodump和mongorestore的封装方法），有一些工具是没有自带的，如果需要更多的工具，得自行下载。得知错误后在官网上下载对应版本得Tools工具，解压后放在mongodb的bin目录下，再次执行该命令就不再报错。</p><p><img src="/2022/12/15/%E8%A7%A3%E5%86%B3-mongorestore-%E4%B8%8D%E6%98%AF%E5%86%85%E9%83%A8%E6%88%96%E5%A4%96%E9%83%A8%E5%91%BD%E4%BB%A4%EF%BC%8C%E4%B9%9F%E4%B8%8D%E6%98%AF%E5%8F%AF%E8%BF%90%E8%A1%8C%E7%9A%84%E7%A8%8B%E5%BA%8F%E9%97%AE%E9%A2%98/2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;1.前言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​       最近在Github上拉取了一个项目并尝试跑在本地。该  项目数据存储采用了mysql和mongodb，其中基础管理配置功能数据使用mysql，业务数据使用mongodb存储。&lt;/p&gt;
&lt;p&gt;​    </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>解决nvm切换版本不成功的问题</title>
    <link href="http://wang-kc.com/2022/12/13/%E8%A7%A3%E5%86%B3nvm%E5%88%87%E6%8D%A2node%E7%89%88%E6%9C%AC%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://wang-kc.com/2022/12/13/%E8%A7%A3%E5%86%B3nvm%E5%88%87%E6%8D%A2node%E7%89%88%E6%9C%AC%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-12-13T08:16:20.976Z</published>
    <updated>2022-12-15T04:09:53.255Z</updated>
    
    <content type="html"><![CDATA[<p>​        在项目开发过程中，由于各种前端框架、插件以及nodejs、npm的飞速更新，在项目新开发或对老项目进行更新维护时，有些项目版本的配置和当前node环境不匹配，导致运行报错，甚至都无法启动。在公司前辈的介绍下，我了解到了nvm,nvm的出现就是为了解决以上问题的，nvm是一个Node.js的版本管理器,可以解决node各种版本存在不兼容问题,nvm其实是在同一台机器上根据需要,安装或切换项目所对应的node版本来适配项目。</p><p>​        nvm的下载安装在此不再赘述。<br>​        下载安装完成后配置一下node和npm的镜像地址。<br>在nvm安装目录，找到 setting.txt 文件加上如下两行:<br>node_mirror: <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a><br>npm_mirror: <a href="https://npm.taobao.org/mirrors/npm/">https://npm.taobao.org/mirrors/npm/</a></p><p>​         一般在安装node的时候，npm也会自动一起安装的。由于nvm可以管理多个版本的node，如果每次添加一个node版本都要安装一堆npm包就烦锁了，所以将npm全局共享出来，只需全局（在安装模块时 npm i xxx -g )加上-g， 就可以让各个版本的node共用就可以了。<br>​         当然npm全局安装目录也是可以修改的：使用：npm config set prefix “要设置的路径” 命令就可以修改！</p><p>npm config set prefix “D:\nodejs\node_modules\node_global”</p><p>npm config set cache “D:\nodejs\node_modules\node_cache”</p><p>​        用 npm root -g 命令，可以查看全局默认npm包的存储位置。然后将npm包的路径添加到用户环境变量中，就实现npm全局共享了。（环境变量在设置完成以后，一定要重新启动或注销一下电脑，环境变量才能生效)<br>下面列举下常用的nvm指令。<br>1.查看本地安装的node所有版本，可选参数available，显示所有可下载的版本。<br>nvm list [available]<br>2.安装，指令中的版本号是可选参数，版本号可根据nvm list [available]查询出来<br>nvm install 12.3.0<br>3.使用指定版本node<br>nvm use + 版本号<br>4.卸载指定版本node<br>nvm uninstall + 版本号<br>5.查看nvm版本号<br>nvm v<br>6.关闭管理node版本<br>nvm off<br>7.开启管理node版本<br>nvm on<br>8.显示node运行在32位还是64位<br>nvm arch<br>9.设置node镜像。默认是<a href="https://nodejs.org/dist/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://nodejs.org/dist/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a><br>nvm node_mirror [url]<br>10.设置npm镜像。<a href="https://github.com/npm/cli/archive/%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8D%E5%86%99url%EF%BC%8C%E5%88%99%E4%BD%BF%E7%94%A8%E9%BB%98%E8%AE%A4url%E3%80%82%E8%AE%BE%E7%BD%AE%E5%90%8E%E5%8F%AF%E8%87%B3%E5%AE%89%E8%A3%85%E7%9B%AE%E5%BD%95settings.txt%E6%96%87%E4%BB%B6%E6%9F%A5%E7%9C%8B%EF%BC%8C%E4%B9%9F%E5%8F%AF%E7%9B%B4%E6%8E%A5%E5%9C%A8%E8%AF%A5%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E3%80%82">https://github.com/npm/cli/archive/。如果不写url，则使用默认url。设置后可至安装目录settings.txt文件查看，也可直接在该文件操作。</a><br>nvm npm_mirror [url]<br>11.安装node， version是特定版本也可以是最新稳定版本latest。可选参数arch指定安装32位还是64位版本，默认是系统位数。可以添加–insecure绕过远程服务器的SSL。<br>nvm install <version> [arch]<br>12.使用制定版本node。可指定32&#x2F;64位。<br>nvm use [version] [arch] </version></p><p><img src="/2022/12/13/%E8%A7%A3%E5%86%B3nvm%E5%88%87%E6%8D%A2node%E7%89%88%E6%9C%AC%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/1.png"></p><p>在使用上述命令控制node版本时遇到了nvm切换node版本不成功的问题，如图所示：显示已经切换成功，但实际没有切换成功。</p><p>即使删除掉也不行<br><img src="/2022/12/13/%E8%A7%A3%E5%86%B3nvm%E5%88%87%E6%8D%A2node%E7%89%88%E6%9C%AC%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/2.png"><br>通过上网查询相关资料，了解到这里的问题是我在装nvm之前已经装了v10.14.1版本了，所以nvm包里面的跟这个很早之前装的文件没有关联，所以第一步找到文件所在位置并删除<br>1.where node<br><img src="/2022/12/13/%E8%A7%A3%E5%86%B3nvm%E5%88%87%E6%8D%A2node%E7%89%88%E6%9C%AC%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/3.png"><br>2.找到文件夹的位置，直接删除掉<br>3.然后查看node -v 发现已经删除成功<br><img src="/2022/12/13/%E8%A7%A3%E5%86%B3nvm%E5%88%87%E6%8D%A2node%E7%89%88%E6%9C%AC%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/4.png"><br>4.现在可以用nvm把之前删除掉的版本再装回来，通过命令node install v10.14.1，现在去切换版本，此时就可以切换成功了<br> <img src="/2022/12/13/%E8%A7%A3%E5%86%B3nvm%E5%88%87%E6%8D%A2node%E7%89%88%E6%9C%AC%E4%B8%8D%E6%88%90%E5%8A%9F%E7%9A%84%E9%97%AE%E9%A2%98/5.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​        在项目开发过程中，由于各种前端框架、插件以及nodejs、npm的飞速更新，在项目新开发或对老项目进行更新维护时，有些项目版本的配置和当前node环境不匹配，导致运行报错，甚至都无法启动。在公司前辈的介绍下，我了解到了nvm,nvm的出现就是为了解决以上问</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="http://wang-kc.com/2022/11/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://wang-kc.com/2022/11/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-11-23T00:08:13.000Z</published>
    <updated>2022-11-23T00:08:13.502Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://wang-kc.com/2022/11/22/hello-world/"/>
    <id>http://wang-kc.com/2022/11/22/hello-world/</id>
    <published>2022-11-22T05:55:34.642Z</published>
    <updated>2022-11-22T05:55:34.643Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
